// Licensed under the Apache-2.0 license

use crate::{Platform, PlatformError, MAX_CHUNK_SIZE};
use core::cmp::min;

pub struct DefaultPlatform;

pub const AUTO_INIT_LOCALITY: u32 = 0;
pub const VENDOR_ID: u32 = 0;
pub const VENDOR_SKU: u32 = 0;

// Generated with openssl using the command openssl req -new -newkey ec -pkeyopt ec_paramgen_curve:prime256v1 -x509 -nodes -days 365 -out cert.pem -keyout cert.pem
// Converted to der format using the command openssl x509 -in cert.pem -outform DER -out cert.der
// Then ran xxd -p cert.der | tr -d '\n' to get a hexdump without new lines
// Ran the following haskell script to format into an array with commas and spaces:
//    splitEvery n = takeWhile (not.null) . map (take n) . iterate (drop n)
//    main = print $ map (\l -> " 0x" ++ l) $ splitEvery 2 bytes
pub const TEST_CERT_CHAIN: [u8; 613] = [
    0x30, 0x82, 0x02, 0x61, 0x30, 0x82, 0x02, 0x07, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x44,
    0xe2, 0x18, 0xb7, 0xa0, 0x92, 0x51, 0x0a, 0xa9, 0x3b, 0x8e, 0xfc, 0xc0, 0x82, 0xbe, 0x4d, 0x6c,
    0xca, 0x24, 0xb4, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
    0x81, 0x85, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31,
    0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x08, 0x49, 0x6c, 0x6c, 0x69, 0x6e, 0x6f,
    0x69, 0x73, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x07, 0x43, 0x68, 0x69,
    0x63, 0x61, 0x67, 0x6f, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x06, 0x47,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03,
    0x50, 0x53, 0x53, 0x31, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x04, 0x53, 0x72,
    0x65, 0x65, 0x31, 0x23, 0x30, 0x21, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09,
    0x01, 0x16, 0x14, 0x73, 0x72, 0x72, 0x65, 0x76, 0x6f, 0x6f, 0x72, 0x69, 0x40, 0x67, 0x6f, 0x6f,
    0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x33, 0x30, 0x35, 0x33,
    0x31, 0x32, 0x33, 0x34, 0x33, 0x32, 0x39, 0x5a, 0x17, 0x0d, 0x32, 0x34, 0x30, 0x35, 0x33, 0x30,
    0x32, 0x33, 0x34, 0x33, 0x32, 0x39, 0x5a, 0x30, 0x81, 0x85, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x08,
    0x0c, 0x08, 0x49, 0x6c, 0x6c, 0x69, 0x6e, 0x6f, 0x69, 0x73, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03,
    0x55, 0x04, 0x07, 0x0c, 0x07, 0x43, 0x68, 0x69, 0x63, 0x61, 0x67, 0x6f, 0x31, 0x0f, 0x30, 0x0d,
    0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x06, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x31, 0x0c, 0x30,
    0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x50, 0x53, 0x53, 0x31, 0x0d, 0x30, 0x0b, 0x06,
    0x03, 0x55, 0x04, 0x03, 0x0c, 0x04, 0x53, 0x72, 0x65, 0x65, 0x31, 0x23, 0x30, 0x21, 0x06, 0x09,
    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x14, 0x73, 0x72, 0x72, 0x65, 0x76,
    0x6f, 0x6f, 0x72, 0x69, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30,
    0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x4e, 0x0d, 0x2f, 0xe1, 0x79, 0xc3,
    0xea, 0x97, 0x07, 0x58, 0x6f, 0xd4, 0x78, 0xb7, 0x15, 0x01, 0xdf, 0x1a, 0x3c, 0xea, 0xf7, 0x7b,
    0x9f, 0xfe, 0xb8, 0xa6, 0x77, 0xb1, 0x3c, 0xc7, 0x21, 0x34, 0x3c, 0xe6, 0x96, 0x16, 0x5b, 0xb3,
    0x7b, 0x5c, 0x82, 0x76, 0xcf, 0x39, 0x93, 0x50, 0xef, 0xd6, 0xee, 0xdf, 0x4d, 0x49, 0xb0, 0x8e,
    0xfb, 0xe7, 0x56, 0x37, 0x2b, 0x2b, 0xed, 0x7f, 0xa1, 0x80, 0xa3, 0x53, 0x30, 0x51, 0x30, 0x1d,
    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x69, 0x6f, 0x35, 0x61, 0x11, 0x12, 0x7b,
    0xc6, 0x90, 0xbd, 0xe4, 0x42, 0x4c, 0x29, 0x4b, 0x80, 0x2c, 0xe9, 0x37, 0x44, 0x30, 0x1f, 0x06,
    0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x69, 0x6f, 0x35, 0x61, 0x11, 0x12,
    0x7b, 0xc6, 0x90, 0xbd, 0xe4, 0x42, 0x4c, 0x29, 0x4b, 0x80, 0x2c, 0xe9, 0x37, 0x44, 0x30, 0x0f,
    0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45,
    0x02, 0x20, 0x63, 0xe9, 0x7d, 0x94, 0x41, 0x91, 0x65, 0xa8, 0xab, 0x55, 0x81, 0x30, 0x8d, 0xb9,
    0xc7, 0x16, 0x5c, 0x09, 0x86, 0xd5, 0xc1, 0xeb, 0x01, 0xc6, 0xcb, 0x01, 0x0c, 0xd9, 0x25, 0x43,
    0x76, 0x57, 0x02, 0x21, 0x00, 0x84, 0x0d, 0xb5, 0x96, 0x8e, 0x32, 0x64, 0xb4, 0xb5, 0x5f, 0x39,
    0x00, 0x7d, 0x07, 0xa3, 0xec, 0xe2, 0x56, 0x71, 0x8b, 0x97, 0x32, 0xc0, 0x69, 0x9b, 0xb4, 0xb8,
    0x5a, 0x64, 0xd7, 0xe1, 0x9a,
];

// Generated manually using the x509 issuer name encoder in x509.rs.
const TEST_ISSUER: [u8; 99] = [
    48, 97, 49, 20, 48, 18, 6, 3, 85, 4, 3, 19, 11, 84, 101, 115, 116, 32, 73, 115, 115, 117, 101,
    114, 49, 73, 48, 71, 6, 3, 85, 4, 5, 19, 64, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
    97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
    97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
    97, 97, 97, 97,
];

impl Platform for DefaultPlatform {
    fn get_certificate_chain(
        &mut self,
        offset: u32,
        size: u32,
        out: &mut [u8; MAX_CHUNK_SIZE],
    ) -> Result<u32, PlatformError> {
        let len = TEST_CERT_CHAIN.len() as u32;
        if offset >= len {
            return Err(PlatformError::CertificateChainError);
        }

        let cert_chunk_range_end = min(offset + size, len);
        let bytes_written = cert_chunk_range_end - offset;
        if bytes_written as usize > MAX_CHUNK_SIZE {
            return Err(PlatformError::CertificateChainError);
        }

        out[..bytes_written as usize]
            .copy_from_slice(&TEST_CERT_CHAIN[offset as usize..cert_chunk_range_end as usize]);
        Ok(bytes_written)
    }

    fn get_issuer_name(&mut self, out: &mut [u8; MAX_CHUNK_SIZE]) -> Result<usize, PlatformError> {
        if TEST_ISSUER.len() >= out.len() {
            return Err(PlatformError::IssuerNameError);
        }
        out[..TEST_ISSUER.len()].copy_from_slice(&TEST_ISSUER);
        Ok(TEST_ISSUER.len())
    }

    fn get_vendor_id(&mut self) -> Result<u32, PlatformError> {
        Ok(VENDOR_ID)
    }

    fn get_vendor_sku(&mut self) -> Result<u32, PlatformError> {
        Ok(VENDOR_SKU)
    }

    fn get_auto_init_locality(&mut self) -> Result<u32, PlatformError> {
        Ok(AUTO_INIT_LOCALITY)
    }
}
